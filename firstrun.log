chenx@DESKTOP-89JKNN7 MINGW64 /d/Study/IndustrialIoT/microservices-example (master)
$ docker
docker                            docker-compose.exe                docker-credential-ecr-login.exe   
docker.exe                        docker-compose-v1.exe             docker-credential-wincred.exe     
docker-compose                    docker-credential-desktop.exe     docker-machine-driver-vmware.exe  

chenx@DESKTOP-89JKNN7 MINGW64 /d/Study/IndustrialIoT/microservices-example (master)
$ docker-compose up
Creating network "microservices-example_default" with the default driver
Building web
[+] Building 13.2s (10/10) FINISHED
 => [internal] load build definition from Dockerfile                                                                                                 
 => => transferring dockerfile: 156B                                                                                                                 
 => [internal] load .dockerignore                                                                                                                    
 => => transferring context: 2B                                                                                                                      
 => [internal] load metadata for docker.io/library/node:14.17.3-alpine                                                                               
 => [auth] library/node:pull token for registry-1.docker.io                                                                                          
 => [internal] load build context                                                                                                                    
 => => transferring context: 8.36MB                                                                                                                  
 => CACHED [1/4] FROM docker.io/library/node:14.17.3-alpine@sha256:fb6cb918cc72869bd625940f42a7d8ae035c4e786d08187b94e8b91c6a534dfd                  
 => [2/4] COPY . /src                                                                                                                                
 => [3/4] WORKDIR /src                                                                                                                               
 => [4/4] RUN npm install --production                                                                                                               
 => exporting to image                                                                                                                               
 => => exporting layers                                                                                                                              
 => => writing image sha256:179f0d06b9f2a038dd3b303e090516db4637b5faacc9cc03153c8851af5abb84                                                         
 => => naming to docker.io/library/microservices-example_web                                                                                         

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
WARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compold`.
Pulling db (mongo:)...
latest: Pulling from library/mongo
35807b77a593: Pull complete
664b0ebdcc07: Pull complete
d598f4d3c081: Pull complete
291455135b00: Pull complete
b46409342f13: Pull complete
ff2b9c6e6f3a: Pull complete
149f6335fc27: Pull complete
baeb6f3bec76: Pull complete
8617caab2de5: Pull complete
067d70de7828: Pull complete
Digest: sha256:58ea1bc09f269a9b85b7e1fae83b7505952aaa521afaaca4131f558955743842
Status: Downloaded newer image for mongo:latest
Building videos
[+] Building 20.0s (9/9) FINISHED
 => [internal] load build definition from Dockerfile                                                                                                 
 => => transferring dockerfile: 156B                                                                                                                 
 => [internal] load .dockerignore                                                                                                                    
 => => transferring context: 2B                                                                                                                      
 => [internal] load metadata for docker.io/library/node:14.17.3-alpine                                                                               
 => [internal] load build context                                                                                                                    
 => => transferring context: 8.36MB                                                                                                                  
 => CACHED [1/4] FROM docker.io/library/node:14.17.3-alpine@sha256:fb6cb918cc72869bd625940f42a7d8ae035c4e786d08187b94e8b91c6a534dfd                  
 => [2/4] COPY . /src                                                                                                                                
 => [3/4] WORKDIR /src                                                                                                                               
 => [4/4] RUN npm install --production                                                                                                               
 => exporting to image                                                                                                                               
 => => exporting layers                                                                                                                              
 => => writing image sha256:8a5af649a7c38d6279f6a99ad683a306834f896baf258198b788de5a83e253aa                                                         
 => => naming to docker.io/library/microservices-example_videos                                                                                      

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
WARNING: Image for service videos was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-cobuild`.
Building books
[+] Building 18.7s (9/9) FINISHED
 => [internal] load build definition from Dockerfile                                                                                                 
 => => transferring dockerfile: 156B                                                                                                                 
 => [internal] load .dockerignore                                                                                                                    
 => => transferring context: 2B                                                                                                                      
 => [internal] load metadata for docker.io/library/node:14.17.3-alpine                                                                               
 => [internal] load build context                                                                                                                    
 => => transferring context: 8.36MB                                                                                                                  
 => CACHED [1/4] FROM docker.io/library/node:14.17.3-alpine@sha256:fb6cb918cc72869bd625940f42a7d8ae035c4e786d08187b94e8b91c6a534dfd                  
 => [2/4] COPY . /src                                                                                                                                
 => [3/4] WORKDIR /src                                                                                                                               
 => [4/4] RUN npm install --production                                                                                                               
 => exporting to image                                                                                                                               
 => => exporting layers                                                                                                                              
 => => writing image sha256:b7cfc8fbda0a28f4ae0ebca3f832ea6276d3c5b57dbace64eec39ffe1bf8a252                                                         
 => => naming to docker.io/library/microservices-example_books                                                                                       

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
WARNING: Image for service books was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-comuild`.
Building search
[+] Building 20.2s (9/9) FINISHED
 => [internal] load build definition from Dockerfile                                                                                                 
 => => transferring dockerfile: 156B                                                                                                                 
 => [internal] load .dockerignore                                                                                                                    
 => => transferring context: 2B                                                                                                                      
 => [internal] load metadata for docker.io/library/node:14.17.3-alpine                                                                               
 => [internal] load build context                                                                                                                    
 => => transferring context: 8.51MB                                                                                                                  
 => CACHED [1/4] FROM docker.io/library/node:14.17.3-alpine@sha256:fb6cb918cc72869bd625940f42a7d8ae035c4e786d08187b94e8b91c6a534dfd                  
 => [2/4] COPY . /src                                                                                                                                
 => [3/4] WORKDIR /src                                                                                                                               
 => [4/4] RUN npm install --production                                                                                                               
 => exporting to image                                                                                                                               
 => => exporting layers                                                                                                                              
 => => writing image sha256:b648bcc67493b205008a05d45d9379d42b65a5144a07f54d67b30866931d5899                                                         
 => => naming to docker.io/library/microservices-example_search                                                                                      

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
WARNING: Image for service search was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-cobuild`.
Pulling nginx (nginx:latest)...
latest: Pulling from library/nginx
a330b6cecb98: Pull complete
e0ad2c0621bc: Pull complete
9e56c3e0e6b7: Pull complete
09f31c94adc6: Pull complete
32b26e9cdb83: Pull complete
20ab512bbb07: Pull complete
Digest: sha256:853b221d3341add7aaadf5f81dd088ea943ab9c918766e295321294b035f3f3e
Status: Downloaded newer image for nginx:latest
Creating microservices-example_web_1 ... done
Creating microservices-example_db_1  ... done
Creating microservices-example_books_1  ... done
Creating microservices-example_videos_1 ... done
Creating microservices-example_search_1 ... done
Creating microservices-example_nginx_1  ... done
Attaching to microservices-example_web_1, microservices-example_db_1, microservices-example_videos_1, microservices-example_search_1, microservices-es_1, microservices-example_nginx_1
books_1   |
books_1   | > books@1.0.0 start /src
books_1   | > node server.js
books_1   | 
books_1   | (node:19) DeprecationWarning: `open()` is deprecated in mongoose >= 4.11.0, use `openUri()` instead, or set the `useMongoClient` option innect()` or `createConnection()`. See http://mongoosejs.com/docs/connections.html#use-mongo-client
books_1   | (Use `node --trace-deprecation ...` to show where the warning was created)
books_1   | running on port 3000
books_1   | --------------------------
db_1      | {"t":{"$date":"2021-09-20T10:09:10.634+00:00"},"s":"I",  "c":"NETWORK",  "id":4915701, "ctx":"-","msg":"Initialized wire specification","c":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incomingInternalClient":{"minWireVersion":0,"maxWireVersion":13},"outgoing":{"ion":0,"maxWireVersion":13},"isInternalClient":true}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.635+00:00"},"s":"I",  "c":"CONTROL",  "id":23285,   "ctx":"-","msg":"Automatically disabling TLS 1.0, able TLS 1.0 specify --sslDisabledProtocols 'none'"}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.636+00:00"},"s":"W",  "c":"ASIO",     "id":22601,   "ctx":"main","msg":"No TransportLayer configured drkInterface startup"}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.637+00:00"},"s":"I",  "c":"NETWORK",  "id":4648601, "ctx":"main","msg":"Implicit TCP FastOpen unavaila FastOpen is required, set tcpFastOpenServer, tcpFastOpenClient, and tcpFastOpenQueueSize."}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.643+00:00"},"s":"W",  "c":"ASIO",     "id":22601,   "ctx":"main","msg":"No TransportLayer configured drkInterface startup"}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.643+00:00"},"s":"I",  "c":"REPL",     "id":5123008, "ctx":"main","msg":"Successfully registered Primare","attr":{"service":"TenantMigrationDonorService","ns":"config.tenantMigrationDonors"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.644+00:00"},"s":"I",  "c":"REPL",     "id":5123008, "ctx":"main","msg":"Successfully registered Primare","attr":{"service":"TenantMigrationRecipientService","ns":"config.tenantMigrationRecipients"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.653+00:00"},"s":"I",  "c":"CONTROL",  "id":4615611, "ctx":"initandlisten","msg":"MongoDB starting","at1,"port":27017,"dbPath":"/data/db","architecture":"64-bit","host":"c83844c7a671"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.654+00:00"},"s":"I",  "c":"CONTROL",  "id":23403,   "ctx":"initandlisten","msg":"Build Info","attr":{"{"version":"5.0.2","gitVersion":"6d9ec525e78465dcecadcff99cce953d380fedc8","openSSLVersion":"OpenSSL 1.1.1f  31 Mar 2020","modules":[],"allocator":"tnvironment":{"distmod":"ubuntu2004","distarch":"x86_64","target_arch":"x86_64"}}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.654+00:00"},"s":"I",  "c":"CONTROL",  "id":51765,   "ctx":"initandlisten","msg":"Operating System","at"name":"Ubuntu","version":"20.04"}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.654+00:00"},"s":"I",  "c":"CONTROL",  "id":21951,   "ctx":"initandlisten","msg":"Options set by commantr":{"options":{"net":{"bindIp":"*"}}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.662+00:00"},"s":"I",  "c":"STORAGE",  "id":22297,   "ctx":"initandlisten","msg":"Using the XFS filesysngly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem","tags":["startupWarnings"]}
db_1      | {"t":{"$date":"2021-09-20T10:09:10.663+00:00"},"s":"I",  "c":"STORAGE",  "id":22315,   "ctx":"initandlisten","msg":"Opening WiredTiger","fig":"create,cache_size=5778M,session_max=33000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=ournal,compressor=snappy),builtin_extension_config=(zstd=(compression_level=6)),file_manager=(close_idle_time=600,close_scan_interval=10,close_handle0),statistics_log=(wait=0),verbose=[recovery_progress,checkpoint_progress,compact_progress],"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.576+00:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","sage":"[1632132551:576062][1:0x7f54128d0c80], txn-recover: [WT_VERB_RECOVERY | WT_VERB_RECOVERY_PROGRESS] Set global recovery timestamp: (0, 0)"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.576+00:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"initandlisten","msg":"WiredTiger message","sage":"[1632132551:576292][1:0x7f54128d0c80], txn-recover: [WT_VERB_RECOVERY | WT_VERB_RECOVERY_PROGRESS] Set global oldest timestamp: (0, 0)"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.613+00:00"},"s":"I",  "c":"STORAGE",  "id":4795906, "ctx":"initandlisten","msg":"WiredTiger opened","ationMillis":950}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.614+00:00"},"s":"I",  "c":"RECOVERY", "id":23987,   "ctx":"initandlisten","msg":"WiredTiger recoveryTittr":{"recoveryTimestamp":{"$timestamp":{"t":0,"i":0}}}}
nginx_1   | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
nginx_1   | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
nginx_1   | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
nginx_1   | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
db_1      | {"t":{"$date":"2021-09-20T10:09:11.687+00:00"},"s":"I",  "c":"STORAGE",  "id":4366408, "ctx":"initandlisten","msg":"No table logging settcations are required for existing WiredTiger tables","attr":{"loggingEnabled":true}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.687+00:00"},"s":"I",  "c":"STORAGE",  "id":22262,   "ctx":"initandlisten","msg":"Timestamp monitor sta
db_1      | {"t":{"$date":"2021-09-20T10:09:11.717+00:00"},"s":"W",  "c":"CONTROL",  "id":22120,   "ctx":"initandlisten","msg":"Access control is notr the database. Read and write access to data and configuration is unrestricted","tags":["startupWarnings"]}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.718+00:00"},"s":"W",  "c":"CONTROL",  "id":22178,   "ctx":"initandlisten","msg":"/sys/kernel/mm/transpage/enabled is 'always'. We suggest setting it to 'never'","tags":["startupWarnings"]}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.720+00:00"},"s":"I",  "c":"STORAGE",  "id":20320,   "ctx":"initandlisten","msg":"createCollection","atpace":"admin.system.version","uuidDisposition":"provided","uuid":{"uuid":{"$uuid":"d091cfb4-1065-49bf-afca-6aba14688cfc"}},"options":{"uuid":{"$uuid"1065-49bf-afca-6aba14688cfc"}}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.782+00:00"},"s":"I",  "c":"INDEX",    "id":20345,   "ctx":"initandlisten","msg":"Index build: done buir":{"buildUUID":null,"namespace":"admin.system.version","index":"_id_","commitTimestamp":null}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.783+00:00"},"s":"I",  "c":"REPL",     "id":20459,   "ctx":"initandlisten","msg":"Setting featureCompation","attr":{"newVersion":"5.0"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.783+00:00"},"s":"I",  "c":"NETWORK",  "id":4915702, "ctx":"initandlisten","msg":"Updated wire specificr":{"oldSpec":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incomingInternalClient":{"minWireVersion":0,"maxWireVersion":13},"ominWireVersion":0,"maxWireVersion":13},"isInternalClient":true},"newSpec":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incominient":{"minWireVersion":13,"maxWireVersion":13},"outgoing":{"minWireVersion":13,"maxWireVersion":13},"isInternalClient":true}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.783+00:00"},"s":"I",  "c":"NETWORK",  "id":4915702, "ctx":"initandlisten","msg":"Updated wire specificr":{"oldSpec":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incomingInternalClient":{"minWireVersion":13,"maxWireVersion":13},""minWireVersion":13,"maxWireVersion":13},"isInternalClient":true},"newSpec":{"incomingExternalClient":{"minWireVersion":0,"maxWireVersion":13},"incomClient":{"minWireVersion":13,"maxWireVersion":13},"outgoing":{"minWireVersion":13,"maxWireVersion":13},"isInternalClient":true}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.783+00:00"},"s":"I",  "c":"STORAGE",  "id":5071100, "ctx":"initandlisten","msg":"Clearing temp directo
db_1      | {"t":{"$date":"2021-09-20T10:09:11.784+00:00"},"s":"I",  "c":"CONTROL",  "id":20536,   "ctx":"initandlisten","msg":"Flow Control is enabl
deployment"}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.796+00:00"},"s":"I",  "c":"FTDC",     "id":20625,   "ctx":"initandlisten","msg":"Initializing full-timc data capture","attr":{"dataDirectory":"/data/db/diagnostic.data"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.797+00:00"},"s":"I",  "c":"STORAGE",  "id":20320,   "ctx":"initandlisten","msg":"createCollection","atpace":"local.startup_log","uuidDisposition":"generated","uuid":{"uuid":{"$uuid":"edf73fe9-08ba-43d0-b8a4-5953467cfb01"}},"options":{"capped":true,"si0}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.893+00:00"},"s":"I",  "c":"INDEX",    "id":20345,   "ctx":"initandlisten","msg":"Index build: done buir":{"buildUUID":null,"namespace":"local.startup_log","index":"_id_","commitTimestamp":null}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.898+00:00"},"s":"I",  "c":"STORAGE",  "id":20320,   "ctx":"LogicalSessionCacheRefresh","msg":"createCoattr":{"namespace":"config.system.sessions","uuidDisposition":"generated","uuid":{"uuid":{"$uuid":"4743d7b8-71c2-44ea-bf30-8e1e3273261b"}},"options":
db_1      | {"t":{"$date":"2021-09-20T10:09:11.898+00:00"},"s":"I",  "c":"CONTROL",  "id":20712,   "ctx":"LogicalSessionCacheReap","msg":"Sessions co not set up; waiting until next sessions reap interval","attr":{"error":"NamespaceNotFound: config.system.sessions does not exist"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.900+00:00"},"s":"I",  "c":"NETWORK",  "id":23015,   "ctx":"listener","msg":"Listening on","attr":{"add/mongodb-27017.sock"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.901+00:00"},"s":"I",  "c":"NETWORK",  "id":23015,   "ctx":"listener","msg":"Listening on","attr":{"add0.0"}}
db_1      | {"t":{"$date":"2021-09-20T10:09:11.901+00:00"},"s":"I",  "c":"NETWORK",  "id":23016,   "ctx":"listener","msg":"Waiting for connections","t":27017,"ssl":"off"}}
search_1  |
search_1  | > search@1.0.0 start /src
search_1  | > node server.js
search_1  |
search_1  | (node:18) DeprecationWarning: `open()` is deprecated in mongoose >= 4.11.0, use `openUri()` instead, or set the `useMongoClient` option innect()` or `createConnection()`. See http://mongoosejs.com/docs/connections.html#use-mongo-client
search_1  | (Use `node --trace-deprecation ...` to show where the warning was created)
search_1  | running on port 3000
search_1  | --------------------------
db_1      | {"t":{"$date":"2021-09-20T10:09:12.043+00:00"},"s":"I",  "c":"INDEX",    "id":20345,   "ctx":"LogicalSessionCacheRefresh","msg":"Index buuilding","attr":{"buildUUID":null,"namespace":"config.system.sessions","index":"_id_","commitTimestamp":null}}
db_1      | {"t":{"$date":"2021-09-20T10:09:12.043+00:00"},"s":"I",  "c":"INDEX",    "id":20345,   "ctx":"LogicalSessionCacheRefresh","msg":"Index buuilding","attr":{"buildUUID":null,"namespace":"config.system.sessions","index":"lsidTTLIndex","commitTimestamp":null}}
videos_1  |
videos_1  | > videos@1.0.0 start /src
videos_1  | > node server.js
videos_1  |
videos_1  | (node:19) DeprecationWarning: `open()` is deprecated in mongoose >= 4.11.0, use `openUri()` instead, or set the `useMongoClient` option innect()` or `createConnection()`. See http://mongoosejs.com/docs/connections.html#use-mongo-client
videos_1  | (Use `node --trace-deprecation ...` to show where the warning was created)
db_1      | {"t":{"$date":"2021-09-20T10:09:12.043+00:00"},"s":"I",  "c":"COMMAND",  "id":51803,   "ctx":"LogicalSessionCacheRefresh","msg":"Slow que{"type":"command","ns":"config.system.sessions","command":{"createIndexes":"system.sessions","v":2,"indexes":[{"key":{"lastUse":1},"name":"lsidTTLIndAfterSeconds":1800}],"ignoreUnknownIndexOptions":false,"writeConcern":{},"$db":"config"},"numYields":0,"reslen":114,"locks":{"ParallelBatchWriterModeCount":{"r":4}},"ReplicationStateTransition":{"acquireCount":{"w":4}},"Global":{"acquireCount":{"r":4,"w":1}},"Database":{"acquireCount":{"r":3,"w":1ion":{"acquireCount":{"r":3,"w":1}},"Mutex":{"acquireCount":{"r":6}}},"storage":{},"protocol":"op_msg","durationMillis":145}}
videos_1  | running on port 3000
videos_1  | --------------------------
db_1      | {"t":{"$date":"2021-09-20T10:09:15.243+00:00"},"s":"I",  "c":"NETWORK",  "id":22943,   "ctx":"listener","msg":"Connection accepted","attr:"172.19.0.4:48260","uuid":"22d446c2-6ebf-4485-97ad-9f39e6c3d47f","connectionId":1,"connectionCount":1}}
db_1      | {"t":{"$date":"2021-09-20T10:09:15.265+00:00"},"s":"I",  "c":"NETWORK",  "id":51800,   "ctx":"conn1","msg":"client metadata","attr":{"rem9.0.4:48260","client":"conn1","doc":{"driver":{"name":"nodejs","version":"2.2.33"},"os":{"type":"Linux","name":"linux","architecture":"x64","version"crosoft-standard-WSL2"},"platform":"Node.js v14.17.3, LE, mongodb-core: 2.1.17"}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:15.412+00:00"},"s":"I",  "c":"NETWORK",  "id":22943,   "ctx":"listener","msg":"Connection accepted","attr:"172.19.0.6:47408","uuid":"c5ef27ae-a0e6-4639-b19b-51009f826fc8","connectionId":2,"connectionCount":2}}
db_1      | {"t":{"$date":"2021-09-20T10:09:15.430+00:00"},"s":"I",  "c":"NETWORK",  "id":51800,   "ctx":"conn2","msg":"client metadata","attr":{"rem9.0.6:47408","client":"conn2","doc":{"driver":{"name":"nodejs","version":"2.2.33"},"os":{"type":"Linux","name":"linux","architecture":"x64","version"crosoft-standard-WSL2"},"platform":"Node.js v14.17.3, LE, mongodb-core: 2.1.17"}}}
db_1      | {"t":{"$date":"2021-09-20T10:09:15.441+00:00"},"s":"I",  "c":"NETWORK",  "id":22943,   "ctx":"listener","msg":"Connection accepted","attr:"172.19.0.5:57480","uuid":"a860b4a2-b258-4d8f-a60a-25fbdf45bf29","connectionId":3,"connectionCount":3}}
db_1      | {"t":{"$date":"2021-09-20T10:09:15.454+00:00"},"s":"I",  "c":"NETWORK",  "id":51800,   "ctx":"conn3","msg":"client metadata","attr":{"rem9.0.5:57480","client":"conn3","doc":{"driver":{"name":"nodejs","version":"2.2.33"},"os":{"type":"Linux","name":"linux","architecture":"x64","version"crosoft-standard-WSL2"},"platform":"Node.js v14.17.3, LE, mongodb-core: 2.1.17"}}}
web_1     |
web_1     | > videos@1.0.0 start /src
web_1     | > node server.js
web_1     |
web_1     | running on port 3000
web_1     | --------------------------
nginx_1   | 10-listen-on-ipv6-by-default.sh: info: /etc/nginx/conf.d/default.conf differs from the packaged version
nginx_1   | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
nginx_1   | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
nginx_1   | /docker-entrypoint.sh: Configuration complete; ready for start up
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: using the "epoll" event method
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: nginx/1.21.3
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: built by gcc 8.3.0 (Debian 8.3.0-6)
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: OS: Linux 5.4.72-microsoft-standard-WSL2
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker processes
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 31
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 32
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 33
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 34
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 35
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 36
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 37
nginx_1   | 2021/09/20 10:09:16 [notice] 1#1: start worker process 38
nginx_1   | 172.19.0.1 - - [20/Sep/2021:10:10:02 +0000] "OPTIONS /api/v1/books HTTP/1.1" 200 13 "http://localhost:3000/" "Mozilla/5.0 (Windows NT 10.64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36 Edg/93.0.961.52" "-"
nginx_1   | 172.19.0.1 - - [20/Sep/2021:10:10:06 +0000] "OPTIONS /api/v1/books HTTP/1.1" 200 13 "http://localhost:3000/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36 Edg/93.0.961.52" "-"
db_1      | {"t":{"$date":"2021-09-20T10:10:11.719+00:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"Checkpointer","msg":"WiredTiger message","attr":{"message":"[1632132611:719723][1:0x7f540a0be700], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 34, snapshot max: 34 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 1"}}
nginx_1   | 172.19.0.1 - - [20/Sep/2021:10:10:12 +0000] "OPTIONS /api/v1/books HTTP/1.1" 200 13 "http://localhost:3000/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36 Edg/93.0.961.52" "-"
nginx_1   | 172.19.0.1 - - [20/Sep/2021:10:10:13 +0000] "OPTIONS /api/v1/books HTTP/1.1" 200 13 "http://localhost:3000/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36 Edg/93.0.961.52" "-"
nginx_1   | 172.19.0.1 - - [20/Sep/2021:10:10:13 +0000] "OPTIONS /api/v1/books HTTP/1.1" 200 13 "http://localhost:3000/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36 Edg/93.0.961.52" "-"
db_1      | {"t":{"$date":"2021-09-20T10:11:11.751+00:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"Checkpointer","msg":"WiredTiger message","attr":{"message":"[1632132671:751773][1:0x7f540a0be700], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 36, snapshot max: 36 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 1"}}
db_1      | {"t":{"$date":"2021-09-20T10:12:11.800+00:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"Checkpointer","msg":"WiredTiger message","attr":{"message":"[1632132731:800634][1:0x7f540a0be700], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 37, snapshot max: 37 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 1"}}
db_1      | {"t":{"$date":"2021-09-20T10:13:11.818+00:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"Checkpointer","msg":"WiredTiger message","attr":{"message":"[1632132791:818675][1:0x7f540a0be700], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 38, snapshot max: 38 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 1"}}
db_1      | {"t":{"$date":"2021-09-20T10:14:11.856+00:00"},"s":"I",  "c":"STORAGE",  "id":22430,   "ctx":"Checkpointer","msg":"WiredTiger message","attr":{"message":"[1632132851:856091][1:0x7f540a0be700], WT_SESSION.checkpoint: [WT_VERB_CHECKPOINT_PROGRESS] saving checkpoint snapshot min: 39, snapshot max: 39 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 1"}}